---
description: 
globs: 
alwaysApply: false
---
# üìò Instru√ß√µes Operacionais para a IA
## üß† Objetivo
A IA deve colaborar na constru√ß√£o de um sistema semelhante ao Typebot, com foco inicial no frontend desenvolvido em React. Toda a coordena√ß√£o de tarefas ser√° gerenciada via o arquivo `progresso.md`.
## üéØ Descri√ß√£o Funcional da Aplica√ß√£o

A aplica√ß√£o √© uma plataforma visual para cria√ß√£o de fluxos conversacionais, semelhante ao Typebot. O objetivo √© permitir que usu√°rios criem bots de conversa atrav√©s de uma interface amig√°vel com componentes arrast√°veis, sem necessidade de programa√ß√£o.

### Usu√°rio-alvo
Criadores de bots, equipes de suporte, empresas que desejam automatizar comunica√ß√£o.

### Funcionalidades principais
- Interface de arrastar-e-soltar para cria√ß√£o de fluxos.
- Blocos configur√°veis: mensagem, entrada de texto, m√∫ltipla escolha, condi√ß√£o, API externa.
- Preview em tempo real da conversa.
- Organiza√ß√£o hier√°rquica dos blocos.
- Armazenamento local (tempor√°rio) dos fluxos.
- Futuro: exporta√ß√£o/publica√ß√£o dos bots.

### Fluxo de uso
1. Usu√°rio acessa a plataforma e visualiza um canvas limpo.
2. Adiciona blocos de conversa conectando-os visualmente.
3. Testa a conversa no modo preview.
4. Salva ou exporta o fluxo.

## üß© Regras Gerais

1. **Orienta√ß√£o por `progresso.md`**
   - Todas as tarefas devem ser lidas e registradas neste arquivo.
   - O progresso de cada tarefa deve ser atualizado assim que houver avan√ßo.
   - A IA pode criar novas entradas quando necess√°rio, seguindo a estrutura preexistente.

2. **Execu√ß√£o Automatizada no Navegador**
   - Caso seja necess√°rio interagir com o navegador, utilize o servidor **MCP do Playwright**, j√° instalado no ambiente.
   - Scripts automatizados devem ser criados conforme a necessidade e executados com comandos do Playwright CLI.

3. **Estrat√©gia de Versionamento**
   - Siga o modelo **GitFlow** para controle de vers√µes.
   - Sempre criar branches nomeadas conforme a etapa (`feature/`, `hotfix/`, `release/`, etc.).
   - Commits devem ser at√¥micos e descritivos, vinculados √†s tarefas listadas no `progresso.md`.

4. **Atualiza√ß√£o de Estado**
   - Ao finalizar qualquer atividade, atualize o `progresso.md`:
     - Marque a tarefa como conclu√≠da
     - Descreva brevemente o que foi feito
     - Informe a branch e o commit correspondente

5. **Solicita√ß√£o de Confirma√ß√µes**
   - A IA deve solicitar aprova√ß√£o ou instru√ß√µes humanas nas seguintes situa√ß√µes:
     - D√∫vidas sobre l√≥gica de interface ou regras de neg√≥cio
     - Escolha entre m√∫ltiplas abordagens t√©cnicas
     - Antes de realizar merge em branches principais

6. **Limita√ß√µes e Conduta**
   - A IA **n√£o deve criar etapas fora daquelas previstas no cronograma**, exceto quando autorizada.
   - A IA **n√£o deve modificar arquivos cr√≠ticos de configura√ß√£o** sem instru√ß√£o expl√≠cita no `progresso.md`.
7. **Commit**
    - Sempre fa√ßa os commit depois dos teste efetuados com sucesso, seguindo o gitflow.

## ‚úÖ Foco Atual
- Priorizar a conclus√£o das tarefas marcadas como pendentes na etapa atual do `progresso.md`.
- Garantir organiza√ß√£o, modularidade e clareza nos componentes do React.

